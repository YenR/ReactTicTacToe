{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","key","toString","squares","_this2","_this3","map","j","squareID","calculateWinner","lines","length","_lines$j","Object","C_Users_Y_my_app_react_tictactoe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","winningTile","renderHighlightedSquare","renderSquare","React","Component","Game","_this4","C_Users_Y_my_app_react_tictactoe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_Y_my_app_react_tictactoe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_Y_my_app_react_tictactoe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","xIsNext","stepNumber","toggle","step","setState","slice","concat","status","_this5","current","winner","draw","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","calculateDraw","moves","move","desc","squares1","squares2","iToCoords","findChange","jumpTo","style","fontWeight","toggleButton","clickToggle","reverse","handleClick","y","_lines$i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf06d0e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className ={props.className} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    // normal square\r\n    renderSquare(i) {\r\n      return (<Square\r\n          className={\"square\"}\r\n          key={i.toString()}\r\n          value={this.props.squares[i]}\r\n          onClick = {() => this.props.onClick(i)}\r\n      />);\r\n    }\r\n\r\n    // highlighted as part of the winning squares\r\n    renderHighlightedSquare(i) {\r\n        return (<Square\r\n            className={\"square_highlighted\"}\r\n            key={i.toString()}\r\n            value={this.props.squares[i]}\r\n            onClick = {() => this.props.onClick(i)}\r\n        />);\r\n    }\r\n\r\n    render() {\r\n        //improved code, functionally same as below but with extendable loops\r\n        return (\r\n            <div key ={'mainboard'}>\r\n            {\r\n                [0,1,2].map( (i) => {\r\n                    return(\r\n                        <div className=\"board-row\" key={'board' + i}>\r\n                        {\r\n                            [0,1,2].map( (j) => {\r\n                                let squareID = (i*3+j);         // the 3 is still hardcoded\r\n                                if(calculateWinner(this.props.squares) && winningTile(this.props.squares, squareID))\r\n                                {\r\n                                    //console.log('square ' + squareID + ' is a winning square')\r\n                                    return this.renderHighlightedSquare(squareID);\r\n                                }\r\n                                return this.renderSquare(squareID);\r\n                            })\r\n                        }\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            </div>\r\n        );\r\n\r\n        // return (\r\n        //   <div>\r\n        //     <div className=\"board-row\">\r\n        //       {this.renderSquare(0)}\r\n        //       {this.renderSquare(1)}\r\n        //       {this.renderSquare(2)}\r\n        //     </div>\r\n        //     <div className=\"board-row\">\r\n        //       {this.renderSquare(3)}\r\n        //       {this.renderSquare(4)}\r\n        //       {this.renderSquare(5)}\r\n        //     </div>\r\n        //     <div className=\"board-row\">\r\n        //       {this.renderSquare(6)}\r\n        //       {this.renderSquare(7)}\r\n        //       {this.renderSquare(8)}\r\n        //     </div>\r\n        //   </div>\r\n        // );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            toggle: false,\r\n        }\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2)===0,\r\n        })\r\n    }\r\n\r\n    handleClick(i)\r\n    {\r\n        const history = this.state.history.slice(0, this.state.stepNumber +1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if(calculateWinner(squares) || squares[i])\r\n            return;\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState(\r\n            {\r\n                history: history.concat([{\r\n                            squares: squares,\r\n                }]),\r\n                stepNumber: history.length,\r\n                xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * toggles between sorting history in descending or ascending order\r\n     */\r\n    clickToggle()\r\n    {\r\n        this.setState({toggle: !this.state.toggle});\r\n        //console.log(\"toggled to: \" + this.state.toggle);\r\n    }\r\n\r\n    render()\r\n    {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const draw = calculateDraw(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            // Description of button including move number, square that was changed and inserted symbol\r\n            const desc = move ? 'Go to move #' + move + ' ' +\r\n                findChange(history[move].squares, history[move-1].squares) +\r\n                ((move%2)===0 ? ' O' : ' X')\r\n                : 'Go to game start';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}\r\n                     style={\r\n                         // if currently active step, make button text bold\r\n                         (move === this.state.stepNumber) ? { fontWeight: 'bold' } : { fontWeight: 'normal' }\r\n                     }>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        const toggleButton = <button onClick={() => this.clickToggle()}>{\r\n            \"Move Sorting Order: \" + (this.state.toggle ? \"Ascending\" : \"Descending\")}\r\n        </button>;\r\n\r\n        if(this.state.toggle)\r\n            moves.reverse();\r\n\r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner;\r\n        }\r\n        else if (draw)\r\n        {\r\n            status = \"Draw\";\r\n        }\r\n        else\r\n        {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n          <div className=\"game\">\r\n            <div className=\"game-board\">\r\n              <Board\r\n                squares = {current.squares}\r\n                onClick = {(i) => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <div className=\"game-info\">\r\n              <div>{status}</div>\r\n              <div>{toggleButton}</div>\r\n              <ol>{\r\n                  moves\r\n              }</ol>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n/**\r\n * finds the first possible change between two board states\r\n * given board states should preferably only differ in one square\r\n * returns '(???)' if no differences were found\r\n * @param squares1 first board state\r\n * @param squares2 second board state, does not matter if actually occurred before or after the first one\r\n * @returns {string} coordinates of the occurred change in format (x,y)\r\n */\r\nfunction findChange(squares1, squares2)\r\n{\r\n    for(var i=0; i<9; i++)\r\n    {\r\n        if(squares1[i] !== squares2[i])\r\n            return iToCoords(i);\r\n    }\r\n    //console.log('' + i + ', ' + squares1[0] + ', ' + squares2[0])\r\n    return '(???)';\r\n}\r\n\r\n/**\r\n * translates a given number i to coordinates in String format (x,y)\r\n * @param i board tile id to be identified as coordinates (0 <= i <= 8)\r\n * @returns {string} translated into format (x,y) with (1 <= x,y <= 3)\r\n */\r\nfunction iToCoords(i)\r\n{\r\n    let y;\r\n    if(i<3)\r\n        y = 0;\r\n    else if(i<6)\r\n        y = 1;\r\n    else\r\n        y = 2;\r\n\r\n    return '(' + (i-3*y+1) + ', ' + (y+1) + ')'\r\n}\r\n\r\n/**\r\n * checks whether or not the square with the given number i is part of a winning line\r\n * based on the calculateWinner function below\r\n * @param squares the field of squares, should be in won condition\r\n * @param i the number of the field to be tested\r\n * @returns {boolean} true if field i was responsible for the win, false otherwise\r\n */\r\nfunction winningTile(squares, i)\r\n{\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let j = 0; j < lines.length; j++) {\r\n        const [a, b, c] = lines[j];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            if(i === a || i === b || i === c)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * returns true if the game is a draw (no more moves and no winner)\r\n * @param squares current board state\r\n */\r\nfunction calculateDraw(squares)\r\n{\r\n    for(let i of squares)\r\n    {\r\n        if(!i)\r\n            return false;\r\n    }\r\n    if(calculateWinner(squares))    // redundant but for call safety\r\n        return false;\r\n    //console.log(\"draw detected\");\r\n    return true;\r\n}\r\n\r\n/**\r\n * borrowed function from tutorial\r\n * @param squares\r\n * @returns {null|*}\r\n */\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}"],"sourceRoot":""}